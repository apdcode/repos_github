ggtitle("Daily pattern by 5 minute interval") + xlab("interval")
p1
p1 <- p1 + geom_point(data = subset(dt_dailypattern, interval == maxint$interval[1]),
colour = "red")
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.5
, label = paste("max = 206 steps for interval 835")))
p1
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.0
, label = paste("max = 206 steps for interval 835")))
p1
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.01
, label = paste("max = 206 steps for interval 835")))
p1
p1 <- ggplot(dt_dailypattern, aes((interval), steps)) + geom_line(colour = "blue") + theme_classic() +
ggtitle("Daily pattern by 5 minute interval") + xlab("interval")
p1
p1 <- p1 + geom_point(data = subset(dt_dailypattern, interval == maxint$interval[1]),
colour = "red")
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.01
, label = paste("max = 206 steps for interval 835")))
# Plot the plot
p1
maxint$interval[1]
maxint$interval[1]
dailymax <- maxint$interval[1]
dailymax
dailymax <- maxint$interval[2]
dailymax
maxint
dailymax <- maxint$max(steps)[2]
dailymax <- maxint[2,1]
dailymax
dailymax <- maxint[1,2]
dailymax
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.01
, label = paste("max = ",dailymax, "steps for interval", maxint[1,1])))
p1
p1 <- ggplot(dt_dailypattern, aes((interval), steps)) + geom_line(colour = "blue") + theme_classic() +
ggtitle("Daily pattern by 5 minute interval") + xlab("interval")
p1 <- p1 + geom_point(data = subset(dt_dailypattern, interval == maxint$interval[1]),
colour = "red")
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.01
, label = paste("max = ",dailymax, "steps for interval", maxint[1,1])))
# Plot the plot
p1
summary(dt_initial)
sapply(dt_initial, function(x) sum(is.na(x)))
sum(sapply(dt_initial, function(x) sum(is.na(x))))
missingSteps <- nrow(subset(dx1, !is.na(dx1$steps)))
dx3 <- subset(dx1, !is.na(dt_Initial$steps))
View(dt_initial)
dx3 <- subset(dt_Initial, !is.na(dt_Initial$steps))
dx3 <- subset(dt_initial, !is.na(dt_initial$steps))
dt_Imputed <- dt_InitialNoNa
dt_avgsteps <- data.table(sqldf("SELECT interval, avg(steps) as steps
FROM dt_InitialNoNa
Group by interval"))
dt_avgsteps <- data.table(sqldf("SELECT interval, avg(steps) as steps
FROM dt_initialNoNa
Group by interval"))
dt_avgsteps
dt_imputed <- dt_initialNoNa
p1 <- p1 + theme(plot.title = element_text(lineheight=.8, face="bold"))
p1
# OBJECTIVE:  Replace missing step data for all intervals with
#             average number of stepds per day for those observations
#             without missing values.
#             Missing observations, if any, for date and interval are removed.
#___4.1___Calculate and report the total number of missing values in the dataset
# A look at the data
summary(dt_initial)
# Total number of missing values
missingTotal <- sum(sapply(dt_initial, function(x) sum(is.na(x))))
#___4.2___Devise a strategy for filling in all of the missing values in the dataset
#         There are a total of 2304 missing values in the original dataset,
#         all of which are missing observations for steps for given dates and intervals.
#         The missing values will be replaced by the average number of steps for the according interval
#___4.3___Replace missing values in dt_imputed with values in dt_avgsteps
#         There are surely many ways to do this, perhaps most efficiently in dplyr.
#         I'm going to brute force the whole process using a nested For Loop.
#         The following code loops through the table dt_imputed.
#         For each missing value, the code loops through the table dt_avgsteps, finds
#         the corresponding step count, and writes it to the table dt_imputed.
# Make a data table in which missing values will be raplaced.
dt_imputed <- dt_initialNoNa
# Make a data table that contains daily averages for all intervals
dt_avgsteps <- data.table(sqldf("SELECT interval, avg(steps) as steps
FROM dt_initialNoNa
Group by interval"))
# Brute Force For Loop
i <- 1
j <- 1
nmiss <- 0
fakesteps <- 0
for(i in 1:length(dt_initial$steps)) {
#print(dt_avgsteps$steps[i])
if (is.na(dt_initial$steps[i])) {
#print(paste(i, "missing", sep = " - "))
nmiss <- nmiss + 1
for(j in 1:length(dt_avgsteps$steps)) {
#print(paste(nmiss,j, "missing", sep = " - "))
if (dt_initial$interval[i] == dt_avgsteps$interval[j]) {
# print(paste(i,j, "missing", sep = " - "))
dt_imputed$steps[i] <- dt_avgsteps$steps[j]
fakesteps <- fakesteps + dt_avgsteps$steps[j]
break
}
}
}
}
i
nmiss
dt_imputed <- dt_initialNoNa
dt_imputed <- dt_initial
# Make a data table that contains daily averages for all intervals
dt_avgsteps <- data.table(sqldf("SELECT interval, avg(steps) as steps
FROM dt_initialNoNa
Group by interval"))
# Brute Force For Loop
i <- 1
j <- 1
nmiss <- 0
fakesteps <- 0
for(i in 1:length(dt_initial$steps)) {
#print(dt_avgsteps$steps[i])
if (is.na(dt_initial$steps[i])) {
#print(paste(i, "missing", sep = " - "))
nmiss <- nmiss + 1
for(j in 1:length(dt_avgsteps$steps)) {
#print(paste(nmiss,j, "missing", sep = " - "))
if (dt_initial$interval[i] == dt_avgsteps$interval[j]) {
# print(paste(i,j, "missing", sep = " - "))
dt_imputed$steps[i] <- dt_avgsteps$steps[j]
fakesteps <- fakesteps + dt_avgsteps$steps[j]
break
}
}
}
}
i
nmiss
View(dt_imputed)
View(dt_initial)
View(dt_imputed)
dt_dailystepsNoNa <- data.table(sqldf("SELECT sum(steps) as steps, date
FROM dt_imputed
Group by date"))
View(dt_dailystepsNoNa)
head(dt_imputed)
dt_imputed2 <- data.table(dt_imputed, dt_initial$steps)
head(dt_imputed2)
newnames <- names(imputed2)
newnames
newnames <- names(imputed2)
newnames <- names(dt_imputed2)
newnames
head(dt_imputed2)
newnames <- names(dt_imputed2)
newnames[4] <- "stepsNA"
setnames(dt_imputed2, old =  names(dt_imputed2), new = newnames)
head(dt_imputed2)
dt_dailystepsImputed <- data.table(sqldf("SELECT sum(steps) as steps, date
FROM dt_imputed
Group by date"))
dt_dailystepsImputed
head(dt_dailystepsimputed)
dt_dailysteps2 <- data.table(sqldf("SELECT sum(steps) as steps, date
FROM dt_imputed
Group by date"))
head(dt_dailystep2)
head(dt_dailysteps2)
# Look at the data
head(dt_dailysteps)
head(dt_dailysteps2)
View(dt_dailysteps)
View(dt_dailysteps2)
fakesteps
View(dt_initial)
85128/10421
nstepsNoNa <- sum(dt_dailysteps2$steps)
avgsteNoNa <- mean(dt_dailysteps2$steps)
medstepsNoNa <- median(dt_dailysteps2$steps)
h1 <- ggplot(data=dt_dailysteps2, aes(dt_dailysteps2$steps)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
h1 <- ggplot(data=dt_dailysteps, aes(dt_dailysteps$steps.sum)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
dt_dailysteps
View(dt_dailysteps)
dt_dailysteps <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_initialNoNa
Group by date")
h1 <- ggplot(data=dt_dailysteps, aes(dt_dailysteps$stepsum)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
dt_dailysteps2 <- data.table(sqldf("SELECT sum(steps) as stepsum, date
FROM dt_imputed
Group by date"))
h2 <- ggplot(data=dt_dailysteps2, aes(dt_dailysteps2$steps)) + geom_histogram(colour = "blue", fill = "grey")
h2 <- h2 + theme_classic()
h2 <- h2 + ggtitle("Total number of steps per day") + xlab("steps")
h2 <- h2 + ylim(0, 14)
plot(h2)
View(dt_initial)
2304/576
85258/2304
View(dt_dailysteps)
dt_dailysteps <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_initialNoNa
Group by date")
View(dt_dailysteps)
View(dt_dailysteps2)
85258/10641
plot(h2)
#___0.1___Clear workspace
rm(list=ls())
# Table settings
# \captionsetup[table]{labelformat=empty}
# List loaded packages
# (.packages())
L
#___0.2___Load packages
# Packages loaded
pck_loaded <- (.packages())
# Packages to load
pck_toload <- c('ggplot2', 'mvtnorm', 'data.table', 'sqldf', 'stargazer', 'xtable')
# Load packages
for(i in 1:length(pck_toload)) {
if (!pck_toload[i] %in% pck_loaded)
print(pck_toload[i])
library(pck_toload[i], character.only = TRUE)
}
remove(i)
#___1.1___Load the data
setwd("C:/repos_github/coursera/repres/data")
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
#___1.2___Process/transform the data into a format suitable for the analysis
#         For this par of the assignment, only complete cases of the dataset is used
#         In other words, all missing values for all columns are removed.
#         Note, however, that the assigment requires quite a bit more data transforming,
#         but this will be done at the appropriate parts of the assignment to show the work flow.
dt_initialNoNa <- dt1[complete.cases(dt1),]
# Rows with missing data removed
naRemoved <- nrow(dt_initial) - nrow(dt_initialNoNa)
remove(dt1)
#___1.1___Load the data
setwd("C:/repos_github/coursera/repres/data")
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
#___1.2___Process/transform the data into a format suitable for the analysis
#         For this par of the assignment, only complete cases of the dataset is used
#         In other words, all missing values for all columns are removed.
#         Note, however, that the assigment requires quite a bit more data transforming,
#         but this will be done at the appropriate parts of the assignment to show the work flow.
dt_initialNoNa <- dt_initial[complete.cases(dt_initial),]
# Rows with missing data removed
naRemoved <- nrow(dt_initial) - nrow(dt_initialNoNa)
remove(dt1)
#___1.1___Load the data
setwd("C:/repos_github/coursera/repres/data")
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
#___1.2___Process/transform the data into a format suitable for the analysis
#         For this par of the assignment, only complete cases of the dataset is used
#         In other words, all missing values for all columns are removed.
#         Note, however, that the assigment requires quite a bit more data transforming,
#         but this will be done at the appropriate parts of the assignment to show the work flow.
dt_initialNoNa <- dt_initial[complete.cases(dt_initial),]
# Rows with missing data removedc
naRemoved <- nrow(dt_initial) - nrow(dt_initialNoNa)
#___2.1___Calculate the total number of steps taken per day
#         For the total number of steps per day, and the corresponding histogram,
#         it is convenient to transform the data into showing unique dates in the date column.
#         This way, total steps for all time intervals are displayed for each day in
#         the datatable dt_dailysteps.
#         There are several ways you can do this. The package data.table has several methods,
#         but mostly I use and sql package for R called sqldf.
# Number of steps per day using data.table
dt_dailystepsDT <- dt_initialNoNa[,.(steps.sum = sum(steps)),by=date]
# Number of steps per day using sqldf
dt_dailysteps <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_initialNoNa
Group by date")
remove(dt_dailystepsDT)
#___2.2___Make a histogram of number of steps taken each day
h1 <- ggplot(data=dt_dailysteps, aes(dt_dailysteps$stepsum)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
#setwd("C:/repos_github/coursera/repres")
#ggsave(filename = "Histogram Number of Steps.pdf", plot = h1)
#___2.3___Calculate and report the mean and median of the total number of steps taken per day
nsteps <- sum(dt_dailysteps$steps)
avgsteps <- mean(dt_dailysteps$steps.sum)
medsteps <- median(dt_dailysteps$steps.sum)
#___3.1___Make a time series plot  of the 5 minute intervals averaged accross all days.
#         Again, it is convenent to transform the original data.
#         Here, the data is stored as an average for each interval accross all observed days
#         in tha data table dt_dailypattern.
# Data transformation
dt_dailypattern <- sqldf("SELECT interval, avg(steps) as steps
FROM dt_initialNoNa
Group by interval")
# The next step adds an index to dt_dailypattern for charting purposes.
# Using the time intervals on a continuos x-axis results in an uneven
# time series due to the jumps between, for example, 955 and 1000.
# Using an index gives a smoother line, but it would also be convenient to change the x-axis notation.
# I'm doing both.
idx1 <- 1:nrow(dt_dailypattern)
dt_dailypattern <- data.table(dt_dailypattern, idx1)
# The plot, step 1
p1 <- ggplot(dt_dailypattern, aes((interval), steps)) + geom_line(colour = "blue") + theme_classic() +
ggtitle("Daily pattern by 5 minute interval") + xlab("interval")
#___3.2___Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Find interval with max steps
maxsteps = max(dt_dailypattern$steps)
# Look up the corresponding interval for the max number of steps
maxint <- sqldf("SELECT interval, max(steps)
FROM dt_dailypattern")
dailymax <- maxint[1,2]
# The plot step 2 - Add a point in the plot indicating the interval with max number of steps and plot it.
p1 <- p1 + geom_point(data = subset(dt_dailypattern, interval == maxint$interval[1]),
colour = "red")
p1 <- p1 + geom_text(data = subset(dt_dailypattern, interval == maxint$interval[1]),
aes(x = interval,y = steps, hjust = -0.01
, label = paste("max = ",dailymax, "steps for interval", maxint[1,1])))
# Plot the plot
p1 <- p1 + theme(plot.title = element_text(lineheight=.8, face="bold"))
p1
# OBJECTIVE:  Replace missing step data for all intervals with
#             average number of stepds per day for those observations
#             without missing values.
#             Missing observations, if any, for date and interval are removed.
#___4.1___Calculate and report the total number of missing values in the dataset
# A look at the data
summary(dt_initial)
# Total number of missing values
missingTotal <- sum(sapply(dt_initial, function(x) sum(is.na(x))))
#___4.2___Devise a strategy for filling in all of the missing values in the dataset
#         There are a total of 2304 missing values in the original dataset,
#         all of which are missing observations for steps for given dates and intervals.
#         The missing values will be replaced by the average number of steps for the according interval
#___4.3___Create a new dataset that is equal to the original dataset but with the missing data filled in.
#         There are surely many ways to do this, perhaps most efficiently in dplyr.
#         I'm going to brute force the whole process using a nested For Loop.
#         The following code loops through the table dt_imputed.
#         For each missing value, the code loops through the table dt_avgsteps, finds
#         the corresponding step count, and writes it to the table dt_imputed.
# Make a data table in which missing values will be raplaced.
dt_imputed <- dt_initial
# Make a data table that contains daily averages for all intervals
dt_avgsteps <- data.table(sqldf("SELECT interval, avg(steps) as steps
FROM dt_initialNoNa
Group by interval"))
# Brute Force For Loop, replacing NAs in dt_imputed with an average step count.
i <- 1
j <- 1
nmiss <- 0
fakesteps <- 0
for(i in 1:length(dt_initial$steps)) {
#print(dt_avgsteps$steps[i])
if (is.na(dt_initial$steps[i])) {
#print(paste(i, "missing", sep = " - "))
nmiss <- nmiss + 1
for(j in 1:length(dt_avgsteps$steps)) {
#print(paste(nmiss,j, "missing", sep = " - "))
if (dt_initial$interval[i] == dt_avgsteps$interval[j]) {
# print(paste(i,j, "missing", sep = " - "))
dt_imputed$steps[i] <- dt_avgsteps$steps[j]
fakesteps <- fakesteps + dt_avgsteps$steps[j]
break
}
}
}
}
#i
# nmiss
# themissing <- nrow(subset(dx1, is.na(dt_nonmissing$steps)))
# themissing
# fakesteps
# missmix <- data.table(dt_missing, dt_nonmissing$steps)
# Look at the data
head(dt_imputed)
setwd("C:/repos_github/coursera/repres/data")
write.table(dt_imputed, "imputedData.csv", row.names = FALSE)
#remove(nonmissing)
#nonmissing <- data.table(read.table("imputedData.csv", sep = " ", header = TRUE))
#___4.4___Make a histogram of the total number of steps taken each day
#         and Calculate and report the mean and median total number of steps taken per day
# Order sum of steps per day for all intervals
dt_dailysteps2 <- data.table(sqldf("SELECT sum(steps) as stepsum, date
FROM dt_imputed
Group by date"))
# Look at the data
head(dt_dailysteps)
head(dt_dailysteps2)
# Number of steps per day, calculations
nstepsNoNa <- sum(dt_dailysteps2$steps)
avgsteNoNa <- mean(dt_dailysteps2$steps)
medstepsNoNa <- median(dt_dailysteps2$steps)
# Histogram of number of steps per day
h2 <- ggplot(data=dt_dailysteps2, aes(dt_dailysteps2$steps)) + geom_histogram(colour = "blue", fill = "grey")
h2 <- h2 + theme_classic()
h2 <- h2 + ggtitle("Total number of steps per day") + xlab("steps")
h2 <- h2 + ylim(0, 14)
plot(h2)
setwd("C:/repos_github/coursera/repres")
ggsave(filename = "Histogram Number of Steps no missing values.pdf", plot = h1)
plot(h2)
plot(h2)
knit('repres_assignment1.Rmd')
avgsteps <- mean(dt_dailysteps$steps.sum)
#___2.1___Calculate the total number of steps taken per day
#         For the total number of steps per day, and the corresponding histogram,
#         it is convenient to transform the data into showing unique dates in the date column.
#         This way, total steps for all time intervals are displayed for each day in
#         the datatable dt_dailysteps.
#         There are several ways you can do this. The package data.table has several methods,
#         but mostly I use and sql package for R called sqldf.
# Number of steps per day using data.table
dt_dailystepsDT <- dt_initialNoNa[,.(steps.sum = sum(steps)),by=date]
# Number of steps per day using sqldf
dt_dailysteps <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_initialNoNa
Group by date")
remove(dt_dailystepsDT)
#___2.2___Make a histogram of number of steps taken each day
h1 <- ggplot(data=dt_dailysteps, aes(dt_dailysteps$stepsum)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
#setwd("C:/repos_github/coursera/repres")
#ggsave(filename = "Histogram Number of Steps.pdf", plot = h1)
#___2.3___Calculate and report the mean and median of the total number of steps taken per day
nsteps <- sum(dt_dailysteps$steps)
avgsteps <- mean(dt_dailysteps$stepsum)
medsteps <- median(dt_dailysteps$stesum)
knit('repres_assignment1.Rmd')
rm(list=ls())
#___0.1___Clear workspace
rm(list=ls())
# Table settings
# \captionsetup[table]{labelformat=empty}
# List loaded packages
# (.packages())
#___0.2___Load packages
# Packages loaded
pck_loaded <- (.packages())
# Packages to load
pck_toload <- c('ggplot2', 'mvtnorm', 'data.table', 'sqldf', 'stargazer', 'xtable')
# Load packages
for(i in 1:length(pck_toload)) {
if (!pck_toload[i] %in% pck_loaded)
print(pck_toload[i])
library(pck_toload[i], character.only = TRUE)
}
remove(i)
#___1.1___Load the data
setwd("C:/repos_github/coursera/repres/data")
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
#___1.2___Process/transform the data into a format suitable for the analysis
#         For this par of the assignment, only complete cases of the dataset is used
#         In other words, all missing values for all columns are removed.
#         Note, however, that the assigment requires quite a bit more data transforming,
#         but this will be done at the appropriate parts of the assignment to show the work flow.
dt_initialNoNa <- dt_initial[complete.cases(dt_initial),]
# Rows with missing data removedc
naRemoved <- nrow(dt_initial) - nrow(dt_initialNoNa)
#___2.1___Calculate the total number of steps taken per day
#         For the total number of steps per day, and the corresponding histogram,
#         it is convenient to transform the data into showing unique dates in the date column.
#         This way, total steps for all time intervals are displayed for each day in
#         the datatable dt_dailysteps.
#         There are several ways you can do this. The package data.table has several methods,
#         but mostly I use and sql package for R called sqldf.
# Number of steps per day using data.table
dt_dailystepsDT <- dt_initialNoNa[,.(steps.sum = sum(steps)),by=date]
# Number of steps per day using sqldf
dt_dailysteps <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_initialNoNa
Group by date")
remove(dt_dailystepsDT)
#___2.2___Make a histogram of number of steps taken each day
h1 <- ggplot(data=dt_dailysteps, aes(dt_dailysteps$stepsum)) + geom_histogram(colour = "blue", fill = "grey")
h1 <- h1 + theme_classic()
h1 <- h1 + ggtitle("Total number of steps per day") + xlab("steps")
h1 <- h1 + ylim(0, 14)
plot(h1)
#setwd("C:/repos_github/coursera/repres")
#ggsave(filename = "Histogram Number of Steps.pdf", plot = h1)
#___2.3___Calculate and report the mean and median of the total number of steps taken per day
nsteps <- sum(dt_dailysteps$steps)
avgsteps <- mean(dt_dailysteps$stepsum)
medsteps <- median(dt_dailysteps$stesum)
knit('PA1_template.Rmd')
getwd()
setwd("C:/repos_github/coursera/repres")
library(knitr)
knit('PA1_template.Rmd')
