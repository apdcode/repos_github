intvmax
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- maxsteps_wday
intvmax[i] <- maxint_wday[1]
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
intvmax
stepmax
intvmax <- 1:nrow(stepmax)
stepmax <- 1:nrow(dt_weekdaypattern)
intvmax <- 1:nrow(lenght(stepmax))
stepmax
intvmax
remove(intmax)
remove(intvmax)
intvmax <- 1:nrow(lenght(stepmax))
intvmax <- 1:nrow(length(stepmax))
stepmax <- 1:nrow(dt_weekdaypattern)
stepmax
intvmax <- 1:nrow(length(stepmax))
stepmax
intvmax <- 1:(length(stepmax))
intvmax
maxint_wday[1]
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- maxsteps_wday
intvmax[i] <- maxint_wday[1]
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
stepmax
intvmax
maxint_wday[1]
maxintv <- maxint_wday[1]
maxintv
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- maxsteps_wday
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
stepmax
intvmax
remove(intvmax)
stepmax <- 1:nrow(dt_weekdaypattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wday[1]
maxintv
intvmax
stepmax
maxintv
maxintv
class(maxintv)
maxsteps_wday
class(maxsteps_wday)
maxintv <- integer(maxint_wday[1])
maxint_wday[1]
maxintv <- integer(maxint_wday$interval[1])
maxintv
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <-
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
maxintv <- maxint_wday$interval[1]
maxintv
class(maxintv)
maxsteps_wday
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- maxsteps_wday
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
stepmax
intvmax
dt_weekdaypattern
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
dt_weekendpattern
View(dt_weekendpattern)
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
dt_weekdaypattern
dt_weekdaypattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekday'
Group by interval"))
maxsteps_wday = max(dt_weekdaypattern$steps)
# Look up the corresponding interval for the max number of steps for weekdays
maxint_wday <- sqldf("SELECT interval, max(steps)
FROM dt_weekdaypattern")
# Make new variables for dt_weekdaypattern in dt_weekdaypattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekdaypattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wday$interval[1]
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- maxsteps_wday
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
dt_weekdaypattern
View(dt_weekdaypattern)
paste("Maximum = ", maxsteps_wday, "at interval", maxintv, sep = "")
dt_weekendpattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekend'
Group by interval"))
maxsteps_wend = max(dt_weekendpattern$steps)
maxsteps_wend
maxint_wend <- sqldf("SELECT interval, max(steps)
FROM dt_weekendpattern")
maxint_wend
remove(intvmax)
stepmax <- 1:nrow(dt_weekendpattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wend$interval[1]
for(i in 1:nrow(dt_weekendpattern)) {
if (dt_weekendpattern$steps[i] == maxsteps_wend) {
stepmax[i] <- paste("Maximum = ", maxsteps_wend, " steps at interval", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekendpattern <- data.table(dt_weekendpattern, intvmax, stepmax)
View(dt_weekendpattern)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
dt_weekpatterns
View(dt_weekpatterns)
View(dt_weekendpattern)
View(dt_weekpatterns)
View(dt_weekdaypattern)
View(dt_weekendpattern)
View(dt_weekpatterns)
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- paste("Maximum = ", maxsteps_wday, " steps at interval", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
remove(dt_weekendpattern)
dt_weekendpattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekend'
Group by interval"))
# Find max interval with corresponding value for weekends
maxsteps_wend = max(dt_weekendpattern$steps)
# Look up the corresponding interval for the max number of steps for weekends
maxint_wend <- sqldf("SELECT interval, max(steps)
FROM dt_weekendpattern")
# Make new variables for dt_weekendpattern in dt_weekendpattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekendpattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wend$interval[1]
for(i in 1:nrow(dt_weekendpattern)) {
if (dt_weekendpattern$steps[i] == maxsteps_wend) {
stepmax[i] <- paste("Maximum = ", maxsteps_wend, " steps at interval ", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekendpattern <- data.table(dt_weekendpattern, intvmax, stepmax)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
dt_weekpatterns
remove(dt_weekpatterns)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
dt_weekendpattern
dt_weekdaypattern
dt_weekdaypattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekday'
Group by interval"))
dt_weekdaypattern
dt_weekdaypattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekday'
Group by interval"))
# Find max interval with corresponding value for weekdays
maxsteps_wday = max(dt_weekdaypattern$steps)
# Look up the corresponding interval for the max number of steps for weekdays
maxint_wday <- sqldf("SELECT interval, max(steps)
FROM dt_weekdaypattern")
# Make new variables for dt_weekdaypattern in dt_weekdaypattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekdaypattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wday$interval[1]
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- paste("Maximum = ", maxsteps_wday, " steps at interval", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
#_________Calculations on weekends
# Average steps per interval for each weekend
dt_weekendpattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekend'
Group by interval"))
# Find max interval with corresponding value for weekends
maxsteps_wend = max(dt_weekendpattern$steps)
# Look up the corresponding interval for the max number of steps for weekends
maxint_wend <- sqldf("SELECT interval, max(steps)
FROM dt_weekendpattern")
# Make new variables for dt_weekendpattern in dt_weekendpattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekendpattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wend$interval[1]
for(i in 1:nrow(dt_weekendpattern)) {
if (dt_weekendpattern$steps[i] == maxsteps_wend) {
stepmax[i] <- paste("Maximum = ", maxsteps_wend, " steps at interval ", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekendpattern <- data.table(dt_weekendpattern, intvmax, stepmax)
# Union dt_weekdaypattern and dt_weekendpattern into dt_weekpatterns
# dt_weekendpattern <- data.table(dt_weekendpattern, stepmax)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
dt_weekpatterns
View(dt_weekpatterns)
p3 <- ggplot(dt_weekpatterns, aes(interval, steps)) + geom_line(colour = "blue")
p3 <- p3 + theme_classic()
p3 <- p3 + facet_grid(dayofweek ~ .)
p3
p3x <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns)
p3x
p3x <- geom_point(data=subset(dt_weekpattern, is.na(stepmax) = TRUE), interval = maxint$interval[1])
p3x <- geom_point(data=subset(dt_weekpattern, is.na(stepmax) = TRUE), interval = 1500)
is.na(stepmax)
p3 <- p3 + geom_point(data = subset(dt_weekpatterns, interval == maxint$interval[1]),
colour = "red")
p3
p3x <- geom_point(data=subset(dt_weekpatterns, is.na(stepmax) = TRUE), interval = 1500)
p3x <- geom_point(data=subset(dt_weekpatterns, is.na(stepmax) == TRUE), interval = 1500)
p3x
p3x <- geom_point(data=subset(dt_weekpatterns, is.na(stepmax)), interval = 1500)
p3x
subset(dt_weekpatterns, interval == maxint$interval[1]),
maxint$interval[1]
subset(dt_weekpatterns, is.na(stepmax))
subset(dt_weekpatterns, !is.na(stepmax))
p3x <- geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)))
p3x
p3x <- p3 + geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)))
p3x
p3x <- p3 + geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)), colour = "red")
p3x
p3 <- ggplot(dt_weekpatterns, aes(interval, steps)) + geom_line(colour = "blue")
p3 <- p3 + theme_classic()
p3 <- p3 + facet_grid(dayofweek ~ .)
p3
p3x <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns)
p3x <- p3 + geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)), colour = "red")
p3x
p3x <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns)
p3x
p3x <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns, hjust = -2)
p3x
p3x <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns, hjust = -0.2)
p3x
p3
p3 <- ggplot(dt_weekpatterns, aes(interval, steps)) + geom_line(colour = "blue")
p3 <- p3 + theme_classic()
p3 <- p3 + facet_grid(dayofweek ~ .)
p3 <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns, hjust = -0.2)
p3 <- p3 + geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)), colour = "red")
p3
#___5.1___Create a new factor variable in the dataset with two levels –
#         “weekday” and “weekend” indicating whether a given date
#         is a weekday or weekend day.
# Make variables for factor categories
dayofweek <- 1:nrow(dt_imputed)
# Factor categories
wday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Change regional settings to match the English language.
Sys.setlocale("LC_TIME", "English")
# Distribute factor categories
for(i in 1:length(dt_imputed$date)) {
cday <- weekdays(as.Date(dt_imputed$date[i]))
if (cday %in% wday) {
dayofweek[i] <- "weekday"
}else{
dayofweek[i] <- "weekend"
}
}
# Add the factor variables to dt_avgsteps in a new table
dt_imputed2 <- data.table(dt_imputed, dayofweek)
# Reset regional settings
# Sys.setlocale("LC_TIME", "Norwegian")
#_________Calculations on weekdays
# Average steps per interval for each weekday
dt_weekdaypattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekday'
Group by interval"))
# Find max interval with corresponding value for weekdays
maxsteps_wday = max(dt_weekdaypattern$steps)
# Look up the corresponding interval for the max number of steps for weekdays
maxint_wday <- sqldf("SELECT interval, max(steps)
FROM dt_weekdaypattern")
# Make new variables for dt_weekdaypattern in dt_weekdaypattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekdaypattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wday$interval[1]
for(i in 1:nrow(dt_weekdaypattern)) {
if (dt_weekdaypattern$steps[i] == maxsteps_wday) {
stepmax[i] <- paste("Maximum = ", maxsteps_wday, " steps at interval ", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekdaypattern <- data.table(dt_weekdaypattern, intvmax, stepmax)
#_________Calculations on weekends
# Average steps per interval for each weekend
dt_weekendpattern <- data.table(sqldf("SELECT interval, avg(steps) as steps, dayofweek
FROM dt_imputed2
WHERE dayofweek = 'weekend'
Group by interval"))
# Find max interval with corresponding value for weekends
maxsteps_wend = max(dt_weekendpattern$steps)
# Look up the corresponding interval for the max number of steps for weekends
maxint_wend <- sqldf("SELECT interval, max(steps)
FROM dt_weekendpattern")
# Make new variables for dt_weekendpattern in dt_weekendpattern, indicating interval with max value
remove(intvmax)
stepmax <- 1:nrow(dt_weekendpattern)
intvmax <- 1:(length(stepmax))
maxintv <- maxint_wend$interval[1]
for(i in 1:nrow(dt_weekendpattern)) {
if (dt_weekendpattern$steps[i] == maxsteps_wend) {
stepmax[i] <- paste("Maximum = ", maxsteps_wend, " steps at interval ", maxintv, sep = "")
intvmax[i] <- maxintv
}else{
stepmax[i] <- NA
intvmax[i] <- NA
}
}
dt_weekendpattern <- data.table(dt_weekendpattern, intvmax, stepmax)
# Union dt_weekdaypattern and dt_weekendpattern into dt_weekpatterns
# dt_weekendpattern <- data.table(dt_weekendpattern, stepmax)
dt_weekpatterns <- data.table(sqldf("SELECT * from dt_weekdaypattern
UNION ALL
SELECT * from dt_weekendpattern
ORDER BY interval"))
# Panel plot for average steps per interval, distiingueshed by weekday or weekend
p3 <- ggplot(dt_weekpatterns, aes(interval, steps)) + geom_line(colour = "blue")
p3 <- p3 + theme_classic()
p3 <- p3 + facet_grid(dayofweek ~ .)
p3 <- p3 + geom_text(aes(x = interval, y = steps, label = stepmax, group=NULL),data=dt_weekpatterns, hjust = -0.2)
p3 <- p3 + geom_point(data=subset(dt_weekpatterns, !is.na(stepmax)), colour = "red")
p3
p3 <- p3 + ggtitle("Steps during the day - Weekdays vs Weekend") + xlab("steps")
p3
?ggtitle
p3 <- p3 + ggtitle("Steps during the day - Weekdays vs Weekend", face = "bold") + xlab("steps")
p3 <- p3 + theme(plot.title = element_text(lineheight=.8, face="bold"))
p3
h1 <- h1 + theme(plot.title = element_text(lineheight=.8, face="bold"))
h1 <- h1 + ylim(0, 14)
plot(h1)
h1 <- h1 + ggtitle("Daily steps for each interval") + xlab("steps")
h1 <- h1 + theme(plot.title = element_text(lineheight=.8, face="bold"))
h1 <- h1 + ylim(0, 14)
plot(h1)
p1 <- p1 + theme(plot.title = element_text(lineheight=.8, face="bold"))
p1
p3 <- p3 + ylim(0, 260)
p3
p1 <- p1 + ylim(0, 260)
p1
missmix
source('~/.active-rstudio-document', echo=TRUE)
missmix
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
(sapply(dt_initial, function(x) sum(is.na(x))))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
h2
dt_initialNa0 <- dt_initial[is.na(dt_initial)] <- 0
dt_initial
dt_initial
dt_initial[is.na(dt_initial)]
View(dt_initial)
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
setwd("C:/repos_github/coursera/repres/data")
dt_initial <- data.table(read.table("activity.csv", sep = ",", header = TRUE))
dt_initial
dt_initialNa0 <- dt_initial
dt_initialNa0[is.na(dt_initialNa0)] <- 0
dt_initialNa0
dt_imputedDiff <- dt_initalNa0 - dt_initial
dt_initalNa0
dt_initialNa0
dt_initial
dt_imputedDiff
dt_imputedDiff <- (dt_initialNa0 - dt_initial)
dt_imputedDiff
View(dt_imputed)
dt_imputedDiff <- (dt_imputed - dt_initial)
dt_imputed
dt_initial
dt_imputedDiff
dt_imputed
dt_imputedDiff <- (dt_imputed - dt_initialNa0)
dt_imputedDiff
View(dt_imputedDiff)
dt_diff <- (dt_imputed - dt_initialNa0)
sum(dt_diff@steps)
dt_diff
sum(dt_diff$steps)
dt_diffdays <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_diff
Group by date")
dt_diffdays
dt_diff$date <- dt_initial$date
dt_diff
dt_diffdays <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_diff
Group by date")
dt_diffdays
sum(dt_diffdays$stepsum)
dt_diffdays <- data.table(sqldf("SELECT sum(steps) as stepsum, date
FROM dt_diff
Group by date"))
dt_diffdays
dt_diffdaysNo0 <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_diff
Where stepsum <> 0
Group by date")
dt_diffdaysNo0 <- sqldf("SELECT sum(steps) as stepsum, date
FROM dt_diffdays
Where stepsum <> 0
Group by date")
dt_diffdaysNo0 <- sqldf("SELECT stepsum, date
FROM dt_diffdays
Where stepsum <> 0
Group by date")
dt_diffdaysNo0
summary(dt_diffdays)
nrow(dt_diffdays)
nrow(dt_diffdaysNo0)
mean(dt_initialNaNo$steps)
mean(dt_dailysteps$steps)
median(dt_dailysteps$steps)
mode(dt_dailysteps$steps)
modal(dt_dailysteps$steps)
?mean
summary(dt_diffdaysNo0)
dt_diffdays
dt_diff
dt_diff
dt_diff <- (dt_imputed - dt_initialNa0)
dt_diff
dt_diff$date <- dt_initial$date
dt_diff$interval <- dt_initial$interval
dt_diff
